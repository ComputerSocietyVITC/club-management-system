generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  regNo     String    @unique
  userName  String    @unique
  contactNo Int       @unique
  role      String
  tasks     Tasks[]
  WorksOn   WorksOn[]
  Attends   Attends[]
  Members   Members[]
}

model Clubs {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  name               String     @unique
  president          String
  facultyCoordinator String
  email              String     @unique
  Projects           Projects[]
  Members            Members[]
}

model Tasks {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String    @unique
  status      Boolean
  createdBy   Users     @relation(fields: [userId], references: [id])
  userId      String
  assignedTo  Projects  @relation(fields: [projectID], references: [id])
  projectID   String
  WorksOn     WorksOn[]
}

model Projects {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String
  link        String
  status      Boolean
  contactNo   Int      @unique
  role        String
  doneBy      Clubs    @relation(fields: [clubID], references: [id])
  clubID      String
  Tasks       Tasks[]
}

model Events {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  startsAt  DateTime
  venue     String
  Attends   Attends[]
}

model WorksOn {
  id        Int      @unique @default(autoincrement())
  user      Users    @relation(fields: [userID], references: [id])
  userID    String
  task      Tasks    @relation(fields: [taskID], references: [id])
  taskID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attends {
  id        Int      @unique @default(autoincrement())
  user      Users    @relation(fields: [userID], references: [id])
  userID    String
  event     Events   @relation(fields: [eventID], references: [id])
  eventID   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Members {
  id        Int      @unique @default(autoincrement())
  user      Users    @relation(fields: [userID], references: [id])
  userID    String
  club      Clubs    @relation(fields: [clubID], references: [id])
  clubID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
